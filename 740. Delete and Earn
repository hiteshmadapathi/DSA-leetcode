T - O(n+max(n))
S - O(max(n))
class Solution:
    def deleteAndEarn(self, nums: List[int]) -> int:
        temp = [0 for i in range(max(nums)+1)]
        for i in range(len(nums)):
            temp[nums[i]] += nums[i]
        skip = 0 
        take = temp[0]
        for i in range(len(temp)):
            temp1 = skip
            skip = max(skip, take)
            take = temp1 + temp[i]
        return max(skip, take)

class Solution:
  def deleteAndEarn(self, nums: List[int]) -> int:
        hmap = {}
        for i in range(len(nums)):
            if nums[i] not in hmap:
                hmap[nums[i]] = nums[i]
            else:
                hmap[nums[i]] = hmap[nums[i]]+nums[i]
        maxi = max(nums)
        for i in range(maxi+1):
            if i not in hmap:
                hmap[i] = 0
        dp = [[0 for j in range(2)] for i in range(maxi+1)]
        for i in range(1,len(dp)):
            dp[i][0] = max(dp[i-1][0],dp[i-1][1])
            dp[i][1] = hmap[i]+dp[i-1][0]
        return max(dp[-1][:])

class Solution:
    def deleteAndEarn(self, nums: List[int]) -> int:
        temp = [0 for i in range(max(nums)+1)]
        for i in range(len(nums)):
            temp[nums[i]] += nums[i]
        return self.helper(temp, 0, 0)

    def helper(self, temp, index, amount):
        # base
        if index>=len(temp):
            return amount
        # logic
        # choose
        case1 = self.helper(temp, index+2, amount+temp[index])
        # not choose
        case2 = self.helper(temp, index+1, amount)
        return max(case1, case2)
