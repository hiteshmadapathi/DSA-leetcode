# Time Complexity - O(n)
# Space Complexity - O(1)

class Solution:
    def rob(self, nums: List[int]) -> int:
        skip = 0
        take = nums[0]
        for i in range(1, len(nums)):
            temp = skip
            skip = max(skip, take)
            take = temp+nums[i]
        return max(skip, take)

    """
    # Time Complexity - O(n)
    # Space Complexity - O(n)
    def rob(self, nums: List[int]) -> int:
        dp = [[0 for i in range(2)] for j in range(len(nums)+1)]
        for i in range(1, len(dp)):
            # case1: not choosing
            dp[i][0] = max(dp[i-1][0], dp[i-1][1])
            # case2: choosing
            dp[i][1] = dp[i-1][0] + nums[i-1]

        # houses robbed to get loot maximum money
        houses = []
        for i in range(len(dp)-1,-1,-1):
            if dp[i][1]==result:
                houses.append(nums[i])
                result = result-nums[i]
        return sum(houses)
    """
    """
    def rob(self, nums: List[int]) -> int:
        return self.helper(nums, 0, 0)
    
    def helper(self, nums, index, amount):
        # base
        if index>=len(nums):
            return amount
        # logic
        # choose
        case1 = self.helper(nums, index+2, amount+nums[index])
        # not choose
        case2 = self.helper(nums, index+1, amount)
        return max(case1, case2)"""
