# Time Complexity - O(mn)
# Space Complexity - O(1)

class Solution:
    def gameOfLife(self, board: List[List[int]]) -> None:
        for i in range(len(board)):
            for j in range(len(board[0])):
                count = self.helper(board, i, j)
                if board[i][j]==1 and (count<2 or count>3):
                    board[i][j] = 2
                if board[i][j]==0 and count==3:
                    board[i][j] = 3
        
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j]==2:
                    board[i][j] = 0
                if board[i][j]==3:
                    board[i][j] = 1
        return board
    
    def helper(self, board, i, j):
        dirs = [[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]]
        # 1 -> 0 => 2
        # 0 -> 1 => 3 
        count = 0
        for k in dirs:
            r = i+k[0]
            c = j+k[1]
            if r>=0 and r<len(board) and c>=0 and c<len(board[0]) and (board[r][c]==1 or board[r][c]==2):
                count = count+1
        return count
