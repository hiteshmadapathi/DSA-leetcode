# Time Complexity - O(nlogn)
# Space Complexity - O(1)

class Solution:
    def findPairs(self, nums: List[int], k: int) -> int:
        if len(nums)==1:
            return 0
        nums = sorted(nums)
        slow = 0
        fast = 1
        count = 0
        while slow<len(nums) and fast<len(nums):
            if slow==fast:
                fast = fast+1
            else:
                if nums[fast]-nums[slow]==k:
                    count = count+1
                    slow = slow+1
                    fast = fast+1
                    while fast<len(nums) and nums[fast]==nums[fast-1]:
                        fast = fast+1
                elif nums[fast]-nums[slow]<k:
                    fast = fast+1
                else:
                    slow = slow+1
        return count

# Time Complexity - O(n)
# Space Complexity - O(n)
    """
    def findPairs(self, nums: List[int], k: int) -> int:
        hset = set()
        result = set()
        for i in range(len(nums)):
            if k==0:
                if nums[i] in hset:
                    result.add((nums[i],nums[i]))
            else:
                if nums[i]+k in hset:
                    result.add((nums[i],nums[i]+k))
                if nums[i]-k in hset:
                    result.add((nums[i]-k,nums[i]))
            hset.add(nums[i])
        return len(result)
    """
