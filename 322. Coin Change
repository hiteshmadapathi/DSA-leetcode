# Time Complexity: O(mn)
# Space Complexity: O(mn)

class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        dp = [[0 for j in range(amount+1)] for i in range(len(coins)+1)]
        for j in range(1, len(dp[0])):
            dp[0][j] = amount+1
        for i in range(1,len(dp)):
            for j in range(1, len(dp[0])):
                # case1: not choosing
                if j<coins[i-1]:
                    dp[i][j] = dp[i-1][j]
                # case2: choosing
                else:
                    dp[i][j] = min(dp[i-1][j], 1 + dp[i][j-coins[i-1]])
        if dp[-1][-1]>amount:
            return -1

        track = []
        i = len(coins)
        j = amount
        while i>0 and j>0:
            if dp[i][j]==dp[i-1][j]:
                i = i-1
            else:
                track.append(coins[i-1])
                j = j-coins[i-1]
        print(track)
        return len(track)

'''    Exhaustive Approach
    def coinChange(self, coins: List[int], amount: int) -> int:
        return self.helper(coins,amount,0,0)
    
    def helper(self,coins,amount,index,coins_used):
        # base
        if amount==0:
            return coins_used
        if amount<0 or index==len(coins):
            return -1
        # logic
        # choose
        case1 = self.helper(coins,amount-coins[index],index,coins_used+1)
        # not choose
        case2 = self.helper(coins,amount,index+1,coins_used)
        
        if case1==-1:
            return case2
        if case2==-1:
            return case1
        return min(case1,case2)'''
