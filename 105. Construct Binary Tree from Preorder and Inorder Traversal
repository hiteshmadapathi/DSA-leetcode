class Solution:
    # Time Complexity - O(n)
    # Space Complexity - O(n)
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:
        if preorder==None or len(preorder)==0:
            return None
        self.hashmap = {}
        self.idx = 0
        for i in range(len(inorder)):
            self.hashmap[inorder[i]] = i
        return self.helper(preorder, inorder, 0, len(inorder)-1)

    def helper(self, preorder, inorder, start, end):
        # base
        if start>end:
            return None
        # logic
        rootVal = preorder[self.idx]
        self.idx = self.idx+1
        root = TreeNode(rootVal)
        rootidx = self.hashmap[rootVal]
        root.left = self.helper(preorder, inorder, start, rootidx-1)
        root.right = self.helper(preorder, inorder, rootidx+1, end)
        return root


    """
    # Time Complexity - O(n^2)
    # Space Complexity - O(n^2)
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:
        if preorder==None or len(preorder)==0:
            return None
        root = TreeNode(preorder[0])
        idx = -1
        for i in range(len(inorder)):
            if inorder[i]==root.val:
                idx = i
                break
        inleft = inorder[:i+1]
        inright = inorder[i+1:]
        preleft = preorder[1:i+1]
        preright = preorder[i+1:]
        root.left = self.buildTree(preleft, inleft)
        root.right = self.buildTree(preright, inright)
        return root
    """
