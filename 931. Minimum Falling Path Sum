# Time Complexity - O(mn)
# Space Complexity - O(mn)

class Solution:
    def minFallingPathSum(self, matrix: List[List[int]]) -> int:
        dp = [[0 for j in range(len(matrix[0]))] for i in range(len(matrix))]
        dp[0][:] = matrix[0][:]
        n, m = len(matrix), len(matrix[0])

        for i in range(1, n):
            for j in range(m):
                if j==0:
                    dp[i][j] = matrix[i][j]+min(dp[i-1][j], dp[i-1][j+1])
                elif j==m-1:
                    dp[i][j] = matrix[i][j]+min(dp[i-1][j], dp[i-1][j-1])
                else:
                    dp[i][j] = matrix[i][j] + min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])
        return min(dp[n-1][:])



    """
    def minFallingPathSum(self, matrix: List[List[int]]) -> int:
        m = len(matrix[0])
        min_ = float('inf')
        for i in range(m):
            case = self.helper(matrix, 0, i, 0)
            min_ = min(min_, case)
        return min_
    
    def helper(self, matrix, row, index, currentSum):
        m = len(matrix[0])
        # base
        if row==len(matrix):
            return currentSum

        # logic
        if index==0:
            return min(self.helper(matrix, row+1, index, currentSum+matrix[row][index]), self.helper(matrix, row+1, index+1, currentSum+matrix[row][index]))
        if index==m-1:
            return min(self.helper(matrix, row+1, index, currentSum+matrix[row][index]), self.helper(matrix, row+1, index-1, currentSum+matrix[row][index]))
        else:
            return min(self.helper(matrix, row+1, index-1, currentSum+matrix[row][index]), self.helper(matrix, row+1, index, currentSum+matrix[row][index]),self.helper(matrix, row+1, index+1, currentSum+matrix[row][index]))
        """
