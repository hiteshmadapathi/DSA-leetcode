class Solution:
    # Time Complexity - O(n)
    # Space Complexity - O(height)
    def isSymmetric(self, root: Optional[TreeNode]) -> bool:
        return self.helper(root.left, root.right)

    def helper(self, left, right):
        # base
        if left==None and right==None:
            return True
        if (left!=None and right==None) or (left==None and right!=None) or (left.val!=right.val):
            return False
        
        # logic
        return self.helper(left.left, right.right) and self.helper(left.right, right.left)
