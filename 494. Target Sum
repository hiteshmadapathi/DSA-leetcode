# Time Complexity - O(len(nums)*sum(nums))
# Space Complexity - O(len(nums)*sum(nums))
class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        dp = {}

        def backtrack(i, total):
            if i==len(nums):
                return 1 if total==target else 0
            if (i, total) in dp:
                return dp[(i, total)]
            
            dp[(i, total)] = backtrack(i+1, total+nums[i]) + backtrack(i+1, total-nums[i])
            return dp[(i, total)]
        return backtrack(0, 0)



    
    """
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        return self.helper(nums, target, 0)
    
    def helper(self, nums, target, index):
        #base
        if index==len(nums):
            if target==0:
                return 1
            else:
                return 0
        #logic
        # choosing +
        case1 = self.helper(nums, target+nums[index], index+1)
        # choosing -
        case2 = self.helper(nums, target-nums[index], index+1)
        return case1 + case2
    """
