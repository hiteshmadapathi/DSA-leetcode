class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        self.prev = None
        self.flag = True
        self.helper(root)
        return self.flag
    
    def helper(self, root):
        if root==None:
            return 
        self.helper(root.left)
        if self.prev!=None and self.prev.val>=root.val:
            self.flag = False
        self.prev = root
        self.helper(root.right)

  '''
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        self.helper(root)
        
    def helper(self,root):
        if root==None:
            return True
        left = self.isValidBST(root.left)
        if left>root:
            return False
        right = self.isValidBST(root.right)
        if right<root:
            return False
        return True'''

  '''
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        self.prev = None
        return self.inorder(root)
    
    def inorder(self,root):
        # base
        if root==None:
            return True
        # logic
        left = self.inorder(root.left)
        if self.prev!=None and self.prev.val>=root.val:
            return False
        self.prev = root
        right = self.inorder(root.right)
        return left and right'''
